{"remainingRequest":"/Users/admin/projects/cybercrowdcoin/cybercrowdcoin-web/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!/Users/admin/projects/cybercrowdcoin/cybercrowdcoin-web/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/admin/projects/cybercrowdcoin/cybercrowdcoin-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/projects/cybercrowdcoin/cybercrowdcoin-web/src/views/Swap/index.vue?vue&type=template&id=4fbadc10&scoped=true","dependencies":[{"path":"/Users/admin/projects/cybercrowdcoin/cybercrowdcoin-web/src/views/Swap/index.vue","mtime":1703758089000},{"path":"/Users/admin/projects/cybercrowdcoin/cybercrowdcoin-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/projects/cybercrowdcoin/cybercrowdcoin-web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/admin/projects/cybercrowdcoin/cybercrowdcoin-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/projects/cybercrowdcoin/cybercrowdcoin-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}